// View all flights scheduled is a list from list select flight 
package main;

import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.util.Date;

import javax.print.attribute.DateTimeSyntax;
import javax.swing.AbstractButton;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;

public class FlightsPage extends Page implements ActionListener
{
	JButton  b1,b2,b3,b4, b5, ok_button;
	JScrollPane scrollPane;
	
	// From CancelFlight
	JLabel deleteflight;
	JTextField deleteflighttext = new JTextField(20);
	
	//From ScheduleFlight
	JTextField flightID;
	JLabel flight;
	
	JComboBox yearD;
	JLabel dep;
	JLabel dep_year;
	JComboBox monthD;
	JLabel dep_month;
	JComboBox dayD;
	JLabel dep_day;
	JComboBox HourD;
	JLabel dep_hr;
	JComboBox MinuteD;
	JLabel dep_min;
	
	JComboBox yearA;
	JLabel arr;
	JLabel arr_year;
	JComboBox monthA;
	JLabel arr_month;
	JComboBox dayA;
	JLabel arr_day;
	JComboBox HourA;
	JLabel arr_hr;
	JComboBox MinuteA;
	JLabel arr_min;

	
	public FlightsPage(GUIMain mainComponent, DatabaseConnecter dc)
	{
		super(mainComponent, dc);
		
		//mainComponent.setLayout(null);
	}

	@Override
	public void createPage()
	{

        
        b1 = new JButton("Cancel Flight");
        b1.setVerticalTextPosition(AbstractButton.BOTTOM);
        b1.setHorizontalTextPosition(AbstractButton.CENTER);
        b1.setActionCommand("CancelFlight");
        b1.addActionListener(this);
        b1.setBounds(50, 50, 40, 30);;

        mainComponent.add(b1);
        
        b2 = new JButton("View all flights");
        b2.setVerticalTextPosition(AbstractButton.TOP);
        b2.setHorizontalTextPosition(AbstractButton.LEFT);
        b2.setActionCommand("createallFlightsTable");
        b2.addActionListener(this);

        mainComponent.add(b2);
        
        b3 = new JButton("Schedule Flight");
        b3.setVerticalTextPosition(AbstractButton.TOP);
        b3.setHorizontalTextPosition(AbstractButton.LEFT);
        b3.setActionCommand("ScheduleFlights");
        b3.addActionListener(this);

        mainComponent.add(b3);
        
        b4 = new JButton("Back");
        b4.setVerticalTextPosition(AbstractButton.BOTTOM);
        b4.setHorizontalTextPosition(AbstractButton.CENTER);
        b4.setActionCommand("gotoAdminMainPage");
        b4.addActionListener(mainComponent);

        mainComponent.add(b4);
        
       
	}

	

	@Override
	public void actionPerformed(ActionEvent evt)
	{
		
		if ("createallFlightsTable".equals(evt.getActionCommand()))
		{
			Object[][] data = dc.getallFlightsTable();
    		
    		JTable table = new JTable(data, DatabaseConnecter.FLIGHT_TABLE_COLUMN_NAMES);
    		table.setPreferredScrollableViewportSize(new Dimension(500, 120));
    		table.setFillsViewportHeight(true);
    		
    		if (scrollPane!= null)
    		{
    			mainComponent.remove(scrollPane);
    		}
    		//Create the scroll pane and add the table to it.
    		scrollPane = new JScrollPane(table);
    		//Add the scroll pane to this panel.
            
    		mainComponent.add(scrollPane);
    		mainComponent.revalidate();
    		mainComponent.repaint();

		}
		
		else if ("CancelFlight".equals(evt.getActionCommand()))
		{
			drawFlightTable();
			JLabel deleteflight = new JLabel("Flight ID");
			JButton ok_button = new JButton("OK");
			ok_button.addActionListener(this);
			mainComponent.add(deleteflight);
			mainComponent.add(deleteflighttext);
			mainComponent.add(ok_button);
		}
		else if ("OK".equals(evt.getActionCommand())){
			int flightID = Integer.parseInt(deleteflighttext.getText());
			dc.deleteFlight(flightID);
			drawFlightTable();
		}
		else if ("ScheduleFlights".equals(evt.getActionCommand()))
		{
			System.out.println("Check1");
			drawFlightTable();
    		
			JTextField flightID = new JTextField(50);
			flightID.setText("");
			JLabel flight = new JLabel("Flight ID");
			mainComponent.add(flight);
			mainComponent.add(flightID);
			
			// String variables for drop down menu
			String [] months = {"01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"};
			String [] days = {"01", "02", "03", "04", "05", "06", "07", "08", "09", "10",
							"11", "12", "13", "14", "15", "16" , "17" , "18", "19", "20",
							"21", "22", "23", "24", "25", "26" , "27" , "28", "29", "30", "31"};
			String [] years = {"2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026"};
			String [] hours = {"01", "02", "03", "04", "05", "06", "07", "08", "09", "10",
					"11", "12", "13", "14", "15", "16" , "17" , "18", "19", "20",
					"21", "22", "23", "00"};
			String [] minutes = {"00","01", "02", "03", "04", "05", "06", "07", "08", "09", "10",
					"11", "12", "13", "14", "15", "16" , "17" , "18", "19", "20",
					"21", "22", "23", "24", "25", "26" , "27" , "28", "29", "30",
					"31", "32", "33", "34", "35", "36" , "37" , "38", "39", "40",
					"41", "42", "43", "44", "45", "46" , "47" , "48", "49", "50",
					"51", "52", "53", "54", "55", "56" , "57" , "58", "59"};
			
			//Drop downs for Scheduled Arrival;
			JComboBox yearD = new JComboBox(years);
			JLabel dep = new JLabel("Scheduled Departure: ");
			JLabel dep_year = new JLabel("Year");
			mainComponent.add(dep);
			mainComponent.add(dep_year);
			mainComponent.add(yearD);
			
			JComboBox monthD = new JComboBox(months);
			JLabel dep_month = new JLabel("Month");
			mainComponent.add(dep_month);
			mainComponent.add(monthD);
			
			JComboBox dayD = new JComboBox(days);
			JLabel dep_day = new JLabel("Date");
			mainComponent.add(dep_day);
			mainComponent.add(dayD);
			
			JComboBox HourD = new JComboBox(hours);
			JLabel dep_hr = new JLabel("Hour");
			mainComponent.add(dep_hr);
			mainComponent.add(HourD);
			
			JComboBox MinuteD = new JComboBox(minutes);
			JLabel dep_min = new JLabel("minute");
			mainComponent.add(dep_min);
			mainComponent.add(MinuteD);
			
			JComboBox yearA = new JComboBox(years);
			JLabel arr = new JLabel("Scheduled Arrival: ");
			JLabel arr_year = new JLabel("Year");
			mainComponent.add(arr);
			mainComponent.add(arr_year);
			mainComponent.add(yearA);
			
			JComboBox monthA = new JComboBox(months);
			JLabel arr_month = new JLabel("Month");
			mainComponent.add(arr_month);
			mainComponent.add(monthA);
			
			JComboBox dayA = new JComboBox(days);
			JLabel arr_day = new JLabel("Date");
			mainComponent.add(arr_day);
			mainComponent.add(dayA);
			
			JComboBox HourA = new JComboBox(hours);
			JLabel arr_hr = new JLabel("Hour");
			mainComponent.add(arr_hr);
			mainComponent.add(HourA);
			
			JComboBox MinuteA = new JComboBox(minutes);
			JLabel arr_min = new JLabel("minute");
			mainComponent.add(arr_min);
			mainComponent.add(MinuteA);
			
			String scheduled_departure = yearD.getSelectedItem().toString() + "/" + monthD.getSelectedItem().toString() + "/"+ dayD.getSelectedItem().toString()
					+ " " + HourD.getSelectedItem().toString()+ ":" + MinuteD.getSelectedItem().toString()+ ":00";
			
			String scheduled_arrival = yearA.getSelectedItem().toString() + "/" + monthA.getSelectedItem().toString() + "/"+ dayA.getSelectedItem().toString()
					+ " " + HourA.getSelectedItem().toString()+ ":" + MinuteA.getSelectedItem().toString()+ ":00";
			System.out.println("Schedule Dep: " + scheduled_departure);
		}
			
			
	

/*			
			// Schedule Departure
			JFrame frame_dm = new JFrame();
			String scheduled_departure; 
			scheduled_departure = 
					(String) JOptionPane.showInputDialog(frame_dm, 
							"Year", "Schedule Departure", 
							JOptionPane.QUESTION_MESSAGE, 
							null, years , years[0]) + "/" +
					(String) JOptionPane.showInputDialog(frame_dm, 
							"month", "Schedule Departure month", 
							JOptionPane.QUESTION_MESSAGE, 
							null,months , months[0])+"/" +
					(String) JOptionPane.showInputDialog(frame_dm, 
						"Date", "Schedule Departure", 
						JOptionPane.QUESTION_MESSAGE, 
						null,days , days[0]) + "  " +
					(String) JOptionPane.showInputDialog(frame_dm, 
							"Hour", "Schedule Departure", 
							JOptionPane.QUESTION_MESSAGE, 
							null, hours , hours[0]) +":" +
					(String) JOptionPane.showInputDialog(frame_dm, 
							"Minute", "Schedule Departure", 
							JOptionPane.QUESTION_MESSAGE, 
							null,minutes , minutes[0])+ ":00";
			
			JOptionPane.showMessageDialog(null, "Scheduled Departure : "+ scheduled_departure);
			
			// Schedule Arrival
			JFrame frame_ar = new JFrame();
			String scheduled_arrival; 
			scheduled_arrival = 
					(String) JOptionPane.showInputDialog(frame_ar, 
							"Year", "Schedule Arrival", 
							JOptionPane.QUESTION_MESSAGE, 
							null, years , years[0]) + "/" +
					(String) JOptionPane.showInputDialog(frame_ar, 
							"month", "Schedule Arrival", 
							JOptionPane.QUESTION_MESSAGE, 
							null,months , months[0])+"/" +
					(String) JOptionPane.showInputDialog(frame_ar, 
						"Date", "Schedule Arrival", 
						JOptionPane.QUESTION_MESSAGE, 
						null,days , days[0]) + "  " +
					(String) JOptionPane.showInputDialog(frame_ar, 
							"Hour", "Schedule Arrival", 
							JOptionPane.QUESTION_MESSAGE, 
							null, hours , hours[0]) +":" +
					(String) JOptionPane.showInputDialog(frame_ar, 
							"Minute", "Schedule Arrival", 
							JOptionPane.QUESTION_MESSAGE, 
							null,minutes , minutes[0])+ ":00";
			JOptionPane.showMessageDialog(null, "Scheduled Arrival : "+ scheduled_arrival);
			
			Date s_arrival = new Date(scheduled_arrival);
			Date s_departure = new Date(scheduled_departure);
			
			if(s_arrival.before(s_departure)){
				final JPanel panel = new JPanel();
				JOptionPane.showMessageDialog(panel, "Invalid Entry of Dates", "Error", JOptionPane.ERROR_MESSAGE);		
			}
			
			
			
			// Origin
			String origin;
			origin = JOptionPane.showInputDialog("From");
			
			String destination;
			destination = JOptionPane.showInputDialog("To");
			

			
			// Airline ID
			String [] airlineIDs = {"1", "2", "3", "4", "5"};
			JFrame frame = new JFrame();
			String airlineID; 
			airlineID = (String) JOptionPane.showInputDialog(frame, 
					"Airline ID", "AirlineID", 
					JOptionPane.QUESTION_MESSAGE, 
					null, airlineIDs, airlineIDs[0]);
			
			// Assigns Plane ID based on which airline ID is chosen
			String plane_ID = null;
			String [] planeID_air1 = {"101", "102", "103"};
			String [] planeID_air2 = {"201", "202", "203"};
			String [] planeID_air3 = {"301", "302", "303"};
			String [] planeID_air4 = {"401", "402", "403"};
			String [] planeID_air5 = {"501", "502", "503"};
			
			if (airlineID == "1"){
				plane_ID = (String) JOptionPane.showInputDialog(frame, "Plane ID", "Plane ID", JOptionPane.QUESTION_MESSAGE, null, planeID_air1, planeID_air1[0]);
			}
			else if (airlineID == "2"){
				plane_ID = (String) JOptionPane.showInputDialog(frame, "Plane ID", "Plane ID", JOptionPane.QUESTION_MESSAGE, null, planeID_air2, planeID_air2[0]);
			}
			else if (airlineID == "3"){
				plane_ID = (String) JOptionPane.showInputDialog(frame, "Plane ID", "Plane ID", JOptionPane.QUESTION_MESSAGE, null, planeID_air3, planeID_air3[0]);
			}
			else if (airlineID == "4"){
				plane_ID = (String) JOptionPane.showInputDialog(frame, "Plane ID", "Plane ID", JOptionPane.QUESTION_MESSAGE, null, planeID_air4, planeID_air4[0]);
			}
			else if (airlineID == "5"){
				plane_ID = (String) JOptionPane.showInputDialog(frame, "Plane ID", "Plane ID", JOptionPane.QUESTION_MESSAGE, null, planeID_air5, planeID_air5[0]);
			}
			
			
			
			String flight; 
			flight = "Schedule \n Flight ID: " + flight_id + "\n Departure Time: " + scheduled_departure
					+ "\n Arrival Time: " + scheduled_arrival + "\n From: " + origin+ "\n To: " + destination
					+ "\n Plane ID: " + plane_ID + "\n Airline: "+ airlineID;
			
			JOptionPane.showMessageDialog(null, flight);
			//dc.ScheduleFlight(flightId, departureTime, arrivalTime, scheduledDepartureTime, scheduledArrivalTime, origin, destination, status, planeId, airlineId);
			//drawFlightTable();
			
		//	}
			//if (n == JOptionPane.CANCEL_OPTION){
			//	JOptionPane.showMessageDialog(null, "Do not schedule Flight");
		//	}
	
		}
			
			
			//dc.ScheduleFlight(flightId, departureTime, arrivalTime, scheduledDepartureTime, scheduledArrivalTime, origin, destination, status, planeId, airlineId);
*/
    	//	drawFlightTable();
		}
		
	
	

	
	private void drawFlightTable (){
		Object[][] data = dc.getAvailableFlightsTable();
		JTable table = new JTable(data, DatabaseConnecter.FLIGHT_TABLE_COLUMN_NAMES);
		table.setPreferredScrollableViewportSize(new Dimension(800, 120));
		table.setFillsViewportHeight(true);
		
		if (scrollPane!= null)
		{
			mainComponent.remove(scrollPane);
		}
		//Create the scroll pane and add the table to it.
		scrollPane = new JScrollPane(table);
		//Add the scroll pane to this panel.
        
		mainComponent.add(scrollPane);
		mainComponent.revalidate();
		mainComponent.repaint();
	}
	
	@Override
	public void cleanPage()
	{
		mainComponent.remove(b1);
		mainComponent.remove(b2);
		mainComponent.remove(b3);
		mainComponent.remove(b4);
		
		//Remove things from Delete
		mainComponent.remove(deleteflight);
		mainComponent.remove(deleteflighttext);
		mainComponent.remove(ok_button);
		
		//Remove things from Schedule
		mainComponent.remove(dep);
		mainComponent.remove(dep_year);
		mainComponent.remove(yearD);
		mainComponent.remove(dep_month);
		mainComponent.remove(monthD);
		mainComponent.remove(dep_day);
		mainComponent.remove(dayD);
		mainComponent.remove(dep_hr);
		mainComponent.remove(HourD);
		mainComponent.remove(dep_min);
		mainComponent.remove(MinuteD);
		
		mainComponent.remove(arr_min);
		mainComponent.remove(MinuteA);
		mainComponent.remove(arr);
		mainComponent.remove(arr_year);
		mainComponent.remove(yearA);
		mainComponent.remove(arr_month);
		mainComponent.remove(monthA);
		mainComponent.remove(arr_day);
		mainComponent.remove(dayA);
		mainComponent.remove(arr_hr);
		mainComponent.remove(HourA);
		
		if (scrollPane!= null)
		{
			mainComponent.remove(scrollPane);
		}
	}

}
